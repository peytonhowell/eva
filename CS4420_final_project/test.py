import unittest
from simulator import Simulator, TestPolicy1, TestPolicy2, Line, FIFO, LRU, RR, TwoQ, LFU, Policy

class TestSimulator(unittest.TestCase):
    
    def testInitMethod(self):
        simulator = Simulator('unit_test.csv')
        self.assertEqual(len(simulator.lines), 2)
        self.assertEqual(simulator.filename, 'unit_test.csv')

    def testSimulatorMethod1(self):
        policy = TestPolicy1()
        simulator = Simulator('unit_test.csv')
        simulator.simulate(policy)
        self.assertEqual(simulator.hits, 0)
        self.assertEqual(simulator.misses, 1)
        self.assertEqual(simulator.total, 1)
        self.assertEqual(simulator.seen_misses, 0)
        self.assertEqual(simulator.worst_case, 0)
        self.assertEqual(policy.counter, 1)

    def testSimulatorMethod2(self):
        policy = TestPolicy2()
        simulator = Simulator('unit_test.csv')
        simulator.simulate(policy)
        self.assertEqual(simulator.hits, 1)
        self.assertEqual(simulator.misses, 0)
        self.assertEqual(simulator.total, 1)
        self.assertEqual(simulator.seen_misses, 0)
        self.assertEqual(simulator.worst_case, 0)
        self.assertEqual(policy.counter, 1)

class TestLine(unittest.TestCase):
    
    def testInitMethod1(self):
        line = Line([1,"True",1,"2021, 10, 31, 15, 59, 09"])
        self.assertEqual(line.frame_id, 1)
        self.assertTrue(line.fix)

    def testInitMethod2(self):
        line = Line([1,"False","ID","2021, 10, 31, 15, 59, 09"])
        self.assertEqual(line.frame_id, "ID")
        self.assertFalse(line.fix)

class TestPolicy(unittest.TestCase):
    def testInitMethod(self):
        policy = Policy()
        self.assertEqual(policy.name, "BasePolicy")
    
    def testFixMethod(self):
        policy = Policy()
        with self.assertRaises(NotImplementedError):
            policy.fix(3)

    def testUnfixMethod(self):
        policy = Policy()
        with self.assertRaises(NotImplementedError):
            policy.unfix(3)

class TestFIFO(unittest.TestCase):
    def testInitMethod(self):
        fifo = FIFO(2)
        self.assertEqual(fifo.size, 2)
        self.assertEqual(fifo.queue, [])
        self.assertEqual(fifo.name, "FIFO")
        self.assertEqual(len(fifo.fixed), 0)

    def testFixMethod(self):
        fifo = FIFO(2)
        self.assertEqual(fifo.size, 2)
        self.assertEqual(fifo.queue, [])
        res = fifo.fix(1)
        self.assertFalse(res)
        self.assertEqual(fifo.queue, [1])
        self.assertEqual(fifo.fixed[1], 1)
        self.assertEqual(fifo.fixed[0], 0)
        res = fifo.fix(1)
        self.assertTrue(res)
        self.assertEqual(fifo.queue, [1])
        self.assertEqual(fifo.fixed[1], 2)
        self.assertEqual(fifo.fixed[0], 0)
        res = fifo.fix(2)
        self.assertFalse(res)
        self.assertEqual(fifo.queue, [1, 2])
        self.assertEqual(fifo.fixed[1], 2)
        self.assertEqual(fifo.fixed[0], 0)
        self.assertEqual(fifo.fixed[2], 1)
        with self.assertRaises(Exception):
            res = fifo.fix(3)
        fifo.unfix(1)
        self.assertEqual(fifo.queue, [1, 2])
        self.assertEqual(fifo.fixed[1], 1)
        self.assertEqual(fifo.fixed[0], 0)
        self.assertEqual(fifo.fixed[2], 1)
        fifo.unfix(1)
        self.assertEqual(fifo.queue, [1, 2])
        self.assertEqual(fifo.fixed[1], 0)
        self.assertEqual(fifo.fixed[0], 0)
        self.assertEqual(fifo.fixed[2], 1)
        res = fifo.fix(3)
        self.assertFalse(res)
        self.assertEqual(fifo.queue, [2, 3])
        self.assertEqual(fifo.fixed[1], 0)
        self.assertEqual(fifo.fixed[0], 0)
        self.assertEqual(fifo.fixed[2], 1)

    def testUnfixMethod(self):
        fifo = FIFO(2)
        self.assertEqual(fifo.size, 2)
        self.assertEqual(fifo.queue, [])
        fifo.fix(1)
        fifo.fix(1)
        fifo.unfix(1)
        self.assertEqual(fifo.queue, [1])
        self.assertEqual(fifo.fixed[1], 1)
        self.assertEqual(fifo.fixed[0], 0)
        fifo.unfix(1)
        self.assertEqual(fifo.queue, [1])
        self.assertEqual(fifo.fixed[1], 0)
        self.assertEqual(fifo.fixed[0], 0)
        fifo.fix(2)
        self.assertEqual(fifo.queue, [1, 2])
        self.assertEqual(fifo.fixed[1], 0)
        self.assertEqual(fifo.fixed[0], 0)
        self.assertEqual(fifo.fixed[2], 1)
        fifo.unfix(2)
        self.assertEqual(fifo.queue, [1, 2])
        self.assertEqual(fifo.fixed[1], 0)
        self.assertEqual(fifo.fixed[0], 0)
        self.assertEqual(fifo.fixed[2], 0)

    def testIntegration1(self):
        fifo = FIFO(3)
        fifo.fix(1)
        fifo.fix(2)
        fifo.fix(3)
        self.assertEqual(fifo.queue, [1, 2, 3])
        self.assertEqual(fifo.fixed[1], 1)
        self.assertEqual(fifo.fixed[2], 1)
        self.assertEqual(fifo.fixed[3], 1)
        self.assertEqual(fifo.fixed[0], 0)
        fifo.unfix(1)
        self.assertEqual(fifo.queue, [1, 2, 3])
        self.assertEqual(fifo.fixed[1], 0)
        self.assertEqual(fifo.fixed[2], 1)
        self.assertEqual(fifo.fixed[3], 1)
        self.assertEqual(fifo.fixed[0], 0)
        fifo.fix(4)
        fifo.fix(4)
        self.assertEqual(fifo.queue, [2, 3, 4])
        self.assertEqual(fifo.fixed[1], 0)
        self.assertEqual(fifo.fixed[2], 1)
        self.assertEqual(fifo.fixed[3], 1)
        self.assertEqual(fifo.fixed[4], 2)
        self.assertEqual(fifo.fixed[0], 0)
        with self.assertRaises(Exception):
            res = fifo.fix(5)

    def testIntegration2(self):
        fifo = FIFO(4)
        fifo.fix(1)
        fifo.fix(2)
        fifo.fix(3)
        fifo.fix(4)
        with self.assertRaises(Exception):
            res = fifo.fix(5)
        self.assertEqual(fifo.queue, [1, 2, 3, 4])
        self.assertEqual(fifo.fixed[1], 1)
        self.assertEqual(fifo.fixed[2], 1)
        self.assertEqual(fifo.fixed[3], 1)
        self.assertEqual(fifo.fixed[4], 1)
        self.assertEqual(fifo.fixed[0], 0)
        fifo.unfix(1)
        self.assertEqual(fifo.queue, [1, 2, 3, 4])
        self.assertEqual(fifo.fixed[1], 0)
        self.assertEqual(fifo.fixed[2], 1)
        self.assertEqual(fifo.fixed[3], 1)
        self.assertEqual(fifo.fixed[0], 0)
        fifo.fix(5)
        fifo.fix(5)
        self.assertEqual(fifo.queue, [2, 3, 4, 5])
        self.assertEqual(fifo.fixed[1], 0)
        self.assertEqual(fifo.fixed[2], 1)
        self.assertEqual(fifo.fixed[3], 1)
        self.assertEqual(fifo.fixed[5], 2)
        self.assertEqual(fifo.fixed[0], 0)
        with self.assertRaises(Exception):
            res = fifo.fix(6)



class TestLRU(unittest.TestCase):
    def testInitMethod(self):
        lru = LRU(2)
        self.assertEqual(lru.size, 2)
        self.assertEqual(list(lru.queue.keys()), [])
        self.assertEqual(lru.name, "LRU")
        self.assertEqual(len(lru.fixed), 0)

    def testFixMethod(self):
        lru = LRU(2)
        self.assertEqual(lru.size, 2)
        self.assertEqual(list(lru.queue.keys()), [])
        res = lru.fix(1)
        self.assertFalse(res)
        self.assertEqual(list(lru.queue.keys()), [1])
        self.assertEqual(lru.fixed[1], 1)
        self.assertEqual(lru.fixed[0], 0)
        res = lru.fix(1)
        self.assertTrue(res)
        self.assertEqual(list(lru.queue.keys()), [1])
        self.assertEqual(lru.fixed[1], 2)
        self.assertEqual(lru.fixed[0], 0)
        lru.unfix(1)
        self.assertEqual(lru.fixed[1], 1)
        res = lru.fix(2)
        self.assertFalse(res)
        self.assertEqual(list(lru.queue.keys()), [1, 2])
        self.assertEqual(lru.fixed[1], 1)
        self.assertEqual(lru.fixed[0], 0)
        self.assertEqual(lru.fixed[2], 1)
        with self.assertRaises(Exception):
            res = lru.fix(3)
        lru.fix(1)
        lru.unfix(1)
        lru.unfix(1)
        lru.unfix(2)
        self.assertEqual(list(lru.queue.keys()), [2, 1])
        self.assertEqual(lru.fixed[1], 0)
        self.assertEqual(lru.fixed[0], 0)
        self.assertEqual(lru.fixed[2], 0)

        res = lru.fix(3)
        self.assertFalse(res)
        self.assertEqual(list(lru.queue.keys()), [1, 3])
        self.assertEqual(lru.fixed[1], 0)
        self.assertEqual(lru.fixed[0], 0)
        self.assertEqual(lru.fixed[3], 1)


    def testUnfixMethod(self):
        lru = LRU(2)
        self.assertEqual(lru.size, 2)
        self.assertEqual(list(lru.queue.keys()), [])
        lru.fix(1)
        lru.fix(1)
        lru.unfix(1)
        self.assertEqual(list(lru.queue.keys()), [1])
        self.assertEqual(lru.fixed[1], 1)
        self.assertEqual(lru.fixed[0], 0)
        lru.unfix(1)
        self.assertEqual(list(lru.queue.keys()), [1])
        self.assertEqual(lru.fixed[1], 0)
        self.assertEqual(lru.fixed[0], 0)
        lru.fix(2)
        self.assertEqual(list(lru.queue.keys()), [1, 2])
        self.assertEqual(lru.fixed[1], 0)
        self.assertEqual(lru.fixed[0], 0)
        self.assertEqual(lru.fixed[2], 1)
        lru.unfix(2)
        self.assertEqual(list(lru.queue.keys()), [1, 2])
        self.assertEqual(lru.fixed[1], 0)
        self.assertEqual(lru.fixed[0], 0)
        self.assertEqual(lru.fixed[2], 0)

    def testIntegration1(self):
        lru = LRU(3)
        lru.fix(1)
        lru.fix(2)
        lru.fix(3)
        self.assertEqual(list(lru.queue.keys()), [1, 2, 3])
        self.assertEqual(lru.fixed[1], 1)
        self.assertEqual(lru.fixed[2], 1)
        self.assertEqual(lru.fixed[3], 1)
        self.assertEqual(lru.fixed[0], 0)
        lru.unfix(1)
        self.assertEqual(list(lru.queue.keys()), [1, 2, 3])
        self.assertEqual(lru.fixed[1], 0)
        self.assertEqual(lru.fixed[2], 1)
        self.assertEqual(lru.fixed[3], 1)
        self.assertEqual(lru.fixed[0], 0)
        lru.fix(1)
        lru.unfix(1)
        lru.unfix(2)
        lru.fix(4)
        lru.fix(4)
        self.assertEqual(list(lru.queue.keys()), [3, 1, 4])
        self.assertEqual(lru.fixed[1], 0)
        self.assertEqual(lru.fixed[2], 0)
        self.assertEqual(lru.fixed[3], 1)
        self.assertEqual(lru.fixed[4], 2)
        self.assertEqual(lru.fixed[0], 0)
        lru.fix(1)
        with self.assertRaises(Exception):
            res = lru.fix(5)

    def testIntegration2(self):
        lru = LRU(4)
        lru.fix(1)
        lru.fix(2)
        lru.fix(3)
        lru.fix(4)
        with self.assertRaises(Exception):
            res = lru.fix(5)
        self.assertEqual(list(lru.queue.keys()), [1, 2, 3, 4])
        self.assertEqual(lru.fixed[1], 1)
        self.assertEqual(lru.fixed[2], 1)
        self.assertEqual(lru.fixed[3], 1)
        self.assertEqual(lru.fixed[4], 1)
        self.assertEqual(lru.fixed[0], 0)
        lru.fix(1)
        lru.unfix(1)
        lru.unfix(1)
        lru.unfix(2)
        self.assertEqual(list(lru.queue.keys()), [2, 3, 4, 1])
        self.assertEqual(lru.fixed[1], 0)
        self.assertEqual(lru.fixed[2], 0)
        self.assertEqual(lru.fixed[3], 1)
        self.assertEqual(lru.fixed[0], 0)
        lru.fix(5)
        lru.fix(5)
        self.assertEqual(list(lru.queue.keys()), [3, 4, 1, 5])
        self.assertEqual(lru.fixed[1], 0)
        self.assertEqual(lru.fixed[2], 0)
        self.assertEqual(lru.fixed[3], 1)
        self.assertEqual(lru.fixed[5], 2)
        self.assertEqual(lru.fixed[0], 0)

class TestRR(unittest.TestCase):
    def testInitMethod(self):
        rr = RR(2)
        self.assertEqual(rr.size, 2)
        self.assertEqual(rr.queue, [])
        self.assertEqual(rr.name, "RR")
        self.assertEqual(len(rr.fixed), 0)

    def testFixMethod(self):
        rr = RR(2)
        self.assertEqual(rr.size, 2)
        self.assertEqual(rr.queue, [])
        res = rr.fix(1)
        self.assertFalse(res)
        self.assertEqual(rr.queue, [1])
        self.assertEqual(rr.fixed[1], 1)
        self.assertEqual(rr.fixed[0], 0)
        res = rr.fix(1)
        self.assertTrue(res)
        self.assertEqual(rr.queue, [1])
        self.assertEqual(rr.fixed[1], 2)
        self.assertEqual(rr.fixed[0], 0)
        res = rr.fix(2)
        self.assertFalse(res)
        self.assertEqual(rr.queue, [1, 2])
        self.assertEqual(rr.fixed[1], 2)
        self.assertEqual(rr.fixed[0], 0)
        self.assertEqual(rr.fixed[2], 1)
        with self.assertRaises(Exception):
            res = rr.fix(3)
        rr.unfix(1)
        self.assertEqual(rr.queue, [1, 2])
        self.assertEqual(rr.fixed[1], 1)
        self.assertEqual(rr.fixed[0], 0)
        self.assertEqual(rr.fixed[2], 1)
        rr.unfix(1)
        self.assertEqual(rr.queue, [1, 2])
        self.assertEqual(rr.fixed[1], 0)
        self.assertEqual(rr.fixed[0], 0)
        self.assertEqual(rr.fixed[2], 1)
        res = rr.fix(3)
        self.assertFalse(res)
        self.assertEqual(len(rr.queue), 2)
        self.assertEqual(rr.fixed[1], 0)
        self.assertEqual(rr.fixed[0], 0)
        self.assertEqual(rr.fixed[2], 1)

    def testUnfixMethod(self):
        rr = RR(2)
        self.assertEqual(rr.size, 2)
        self.assertEqual(rr.queue, [])
        rr.fix(1)
        rr.fix(1)
        rr.unfix(1)
        self.assertEqual(rr.queue, [1])
        self.assertEqual(rr.fixed[1], 1)
        self.assertEqual(rr.fixed[0], 0)
        rr.unfix(1)
        self.assertEqual(rr.queue, [1])
        self.assertEqual(rr.fixed[1], 0)
        self.assertEqual(rr.fixed[0], 0)
        rr.fix(2)
        self.assertEqual(rr.queue, [1, 2])
        self.assertEqual(rr.fixed[1], 0)
        self.assertEqual(rr.fixed[0], 0)
        self.assertEqual(rr.fixed[2], 1)
        rr.unfix(2)
        self.assertEqual(rr.queue, [1, 2])
        self.assertEqual(rr.fixed[1], 0)
        self.assertEqual(rr.fixed[0], 0)
        self.assertEqual(rr.fixed[2], 0)

    def testIntegration1(self):
        rr = RR(3)
        rr.fix(1)
        rr.fix(2)
        rr.fix(3)
        self.assertEqual(rr.queue, [1, 2, 3])
        self.assertEqual(rr.fixed[1], 1)
        self.assertEqual(rr.fixed[2], 1)
        self.assertEqual(rr.fixed[3], 1)
        self.assertEqual(rr.fixed[0], 0)
        rr.unfix(1)
        self.assertEqual(rr.queue, [1, 2, 3])
        self.assertEqual(rr.fixed[1], 0)
        self.assertEqual(rr.fixed[2], 1)
        self.assertEqual(rr.fixed[3], 1)
        self.assertEqual(rr.fixed[0], 0)
        rr.fix(4)
        rr.fix(4)
        self.assertEqual(len(rr.queue), 3)
        self.assertEqual(rr.fixed[1], 0)
        self.assertEqual(rr.fixed[2], 1)
        self.assertEqual(rr.fixed[3], 1)
        self.assertEqual(rr.fixed[4], 2)
        self.assertEqual(rr.fixed[0], 0)
        with self.assertRaises(Exception):
            res = rr.fix(5)

    def testIntegration2(self):
        rr = RR(4)
        rr.fix(1)
        rr.fix(2)
        rr.fix(3)
        rr.fix(4)
        with self.assertRaises(Exception):
            res = rr.fix(5)
        self.assertEqual(rr.queue, [1, 2, 3, 4])
        self.assertEqual(rr.fixed[1], 1)
        self.assertEqual(rr.fixed[2], 1)
        self.assertEqual(rr.fixed[3], 1)
        self.assertEqual(rr.fixed[4], 1)
        self.assertEqual(rr.fixed[0], 0)
        rr.unfix(1)
        self.assertEqual(rr.queue, [1, 2, 3, 4])
        self.assertEqual(rr.fixed[1], 0)
        self.assertEqual(rr.fixed[2], 1)
        self.assertEqual(rr.fixed[3], 1)
        self.assertEqual(rr.fixed[0], 0)
        res = rr.fix(5)
        self.assertFalse(res)
        self.assertEqual(rr.queue, [2, 3, 4, 5])
        self.assertEqual(rr.fixed[1], 0)
        self.assertEqual(rr.fixed[2], 1)
        self.assertEqual(rr.fixed[3], 1)
        self.assertEqual(rr.fixed[5], 1)
        self.assertEqual(rr.fixed[0], 0)
        res = rr.fix(5)
        self.assertTrue(res)
        self.assertEqual(rr.queue, [2, 3, 4, 5])
        self.assertEqual(rr.fixed[1], 0)
        self.assertEqual(rr.fixed[2], 1)
        self.assertEqual(rr.fixed[3], 1)
        self.assertEqual(rr.fixed[5], 2)
        self.assertEqual(rr.fixed[0], 0)
        with self.assertRaises(Exception):
            rr.fix(6)

class TestTwoQ(unittest.TestCase):
    def testInitMethod(self):
        twoQ = TwoQ(2)
        self.assertEqual(twoQ.size, 2)
        self.assertEqual(twoQ.fifo, [])
        self.assertEqual(len(twoQ.lru), 0)
        self.assertEqual(twoQ.name, "2Q")
        self.assertEqual(len(twoQ.fixed), 0)

    def testFixMethod(self):
        twoQ = TwoQ(2)
        self.assertEqual(twoQ.size, 2)
        self.assertEqual(twoQ.fifo, [])
        self.assertEqual(list(twoQ.lru.keys()), [])
        res = twoQ.fix(1)
        self.assertFalse(res)
        self.assertEqual(twoQ.fifo, [1])
        self.assertEqual(twoQ.fixed[1], 1)
        self.assertEqual(list(twoQ.lru.keys()), [])

        res = twoQ.fix(1)
        self.assertTrue(res)
        self.assertEqual(twoQ.fifo, [])
        self.assertEqual(list(twoQ.lru.keys()), [1])
        self.assertEqual(twoQ.fixed[1], 2)
        res = twoQ.fix(2)
        self.assertFalse(res)
        self.assertEqual(twoQ.fifo, [2])
        self.assertEqual(list(twoQ.lru.keys()), [1])
        self.assertEqual(twoQ.fixed[1], 2)
        self.assertEqual(twoQ.fixed[2], 1)
        twoQ.unfix(1)
        with self.assertRaises(Exception):
            res = twoQ.fix(3)
        twoQ.unfix(2)
        twoQ.fix(3)
        with self.assertRaises(Exception):
            res = twoQ.fix(2)
        
        self.assertEqual(twoQ.fifo, [3])
        self.assertEqual(twoQ.fixed[1], 1)
        self.assertEqual(twoQ.fixed[2], 0)
        self.assertEqual(twoQ.fixed[3], 1)
        twoQ.unfix(3)
        res = twoQ.fix(4)
        self.assertFalse(res)
        self.assertEqual(list(twoQ.lru.keys()), [1])
        self.assertEqual(twoQ.fifo, [4])
        self.assertEqual(twoQ.fixed[1], 1)
        self.assertEqual(twoQ.fixed[2], 0)
        self.assertEqual(twoQ.fixed[3], 0)
        self.assertEqual(twoQ.fixed[4], 1)
        res = twoQ.fix(4)
        self.assertTrue(res)
        self.assertEqual(list(twoQ.lru.keys()), [1, 4])
        self.assertEqual(twoQ.fifo, [])
        self.assertEqual(twoQ.fixed[1], 1)
        self.assertEqual(twoQ.fixed[2], 0)
        self.assertEqual(twoQ.fixed[3], 0)
        self.assertEqual(twoQ.fixed[4], 2)

    def testUnfixMethod(self):
        twoQ = TwoQ(2)
        self.assertEqual(twoQ.size, 2)
        self.assertEqual(twoQ.fifo, [])
        twoQ.fix(1)
        twoQ.fix(1)
        twoQ.unfix(1)
        self.assertEqual(list(twoQ.lru.keys()), [1])
        self.assertEqual(twoQ.fixed[1], 1)
        twoQ.unfix(1)
        self.assertEqual(list(twoQ.lru.keys()), [1])
        self.assertEqual(twoQ.fixed[1], 0)
        self.assertEqual(twoQ.fixed[0], 0)
        twoQ.fix(2)
        self.assertEqual(twoQ.fifo, [2])
        self.assertEqual(twoQ.fixed[2], 1)
        twoQ.unfix(2)
        self.assertEqual(twoQ.fixed[2], 0)
        self.assertEqual(twoQ.fixed[1], 0)


    def testIntegration1(self):
        twoQ = TwoQ(3)
        twoQ.fix(1)
        twoQ.fix(2)
        twoQ.fix(3)
        self.assertEqual(twoQ.fifo, [1, 2, 3])
        self.assertEqual(twoQ.fixed[1], 1)
        self.assertEqual(twoQ.fixed[2], 1)
        self.assertEqual(twoQ.fixed[3], 1)
        self.assertEqual(twoQ.fixed[0], 0)
        twoQ.unfix(1)
        self.assertEqual(twoQ.fifo, [1, 2, 3])
        self.assertEqual(twoQ.fixed[1], 0)
        self.assertEqual(twoQ.fixed[2], 1)
        self.assertEqual(twoQ.fixed[3], 1)
        self.assertEqual(twoQ.fixed[0], 0)
        twoQ.fix(4)
        self.assertEqual(twoQ.fifo, [2, 3, 4])
        self.assertEqual(twoQ.fixed[1], 0)
        self.assertEqual(twoQ.fixed[2], 1)
        self.assertEqual(twoQ.fixed[3], 1)
        self.assertEqual(twoQ.fixed[4], 1)
        with self.assertRaises(Exception):
            res = twoQ.fix(5)
        twoQ.fix(2)
        twoQ.unfix(2)
        twoQ.unfix(2)
        twoQ.fix(3)
        twoQ.fix(4)
        twoQ.fix(5)
        twoQ.fix(5)
        self.assertEqual(list(twoQ.lru.keys()), [3, 4, 5])
        self.assertEqual(twoQ.fixed[1], 0)
        self.assertEqual(twoQ.fixed[2], 0)
        self.assertEqual(twoQ.fixed[3], 2)
        self.assertEqual(twoQ.fixed[4], 2)

    def testIntegration2(self):
        twoQ = TwoQ(4)
        twoQ.fix(1)
        twoQ.fix(2)
        twoQ.fix(3)
        twoQ.fix(4)
        with self.assertRaises(Exception):
            res = twoQ.fix(5)
        self.assertEqual(twoQ.fifo, [1, 2, 3, 4])
        self.assertEqual(twoQ.fixed[1], 1)
        self.assertEqual(twoQ.fixed[2], 1)
        self.assertEqual(twoQ.fixed[3], 1)
        self.assertEqual(twoQ.fixed[4], 1)
        self.assertEqual(twoQ.fixed[0], 0)
        twoQ.unfix(1)
        self.assertEqual(twoQ.fifo, [1, 2, 3, 4])
        self.assertEqual(twoQ.fixed[1], 0)
        self.assertEqual(twoQ.fixed[2], 1)
        self.assertEqual(twoQ.fixed[3], 1)
        self.assertEqual(twoQ.fixed[0], 0)
        twoQ.fix(5)
        twoQ.fix(5)
        res  = twoQ.fix(5)
        self.assertTrue(res)
        self.assertEqual(twoQ.fifo, [2, 3, 4])
        self.assertEqual(twoQ.fixed[1], 0)
        self.assertEqual(twoQ.fixed[2], 1)
        self.assertEqual(twoQ.fixed[3], 1)
        self.assertEqual(twoQ.fixed[5], 3)
        self.assertEqual(list(twoQ.lru.keys()), [5])
        with self.assertRaises(Exception):
            res = twoQ.fix(6)


class TestLFU(unittest.TestCase):
    def testInitMethod(self):
        lfu = LFU(2)
        self.assertEqual(lfu.size, 2)
        self.assertEqual(list(lfu.queue.keys()), [])
        self.assertEqual(lfu.name, "LFU")
        self.assertEqual(len(lfu.fixed), 0)

    def testFixMethod(self):
        lfu = LFU(2)
        self.assertEqual(lfu.size, 2)
        self.assertEqual(list(lfu.queue.keys()), [])
        res = lfu.fix(1)
        self.assertFalse(res)
        self.assertEqual(list(lfu.queue.keys()), [1])
        self.assertEqual(lfu.fixed[1], 1)
        self.assertEqual(lfu.fixed[0], 0)
        res = lfu.fix(1)
        self.assertTrue(res)
        self.assertEqual(list(lfu.queue.keys()), [1])
        self.assertEqual(lfu.fixed[1], 2)
        self.assertEqual(lfu.fixed[0], 0)
        lfu.unfix(1)
        self.assertEqual(lfu.fixed[1], 1)
        res = lfu.fix(2)
        self.assertFalse(res)
        self.assertEqual(list(lfu.queue.keys()), [2, 1])
        self.assertEqual(lfu.fixed[1], 1)
        self.assertEqual(lfu.fixed[0], 0)
        self.assertEqual(lfu.fixed[2], 1)
        with self.assertRaises(Exception):
            res = lfu.fix(3)
        lfu.fix(1)
        lfu.unfix(1)
        lfu.unfix(1)
        lfu.unfix(2)
        self.assertEqual(list(lfu.queue.keys()), [2, 1])
        self.assertEqual(lfu.fixed[1], 0)
        self.assertEqual(lfu.fixed[0], 0)
        self.assertEqual(lfu.fixed[2], 0)

        res = lfu.fix(3)
        self.assertFalse(res)
        self.assertEqual(list(lfu.queue.keys()), [3, 1])
        self.assertEqual(lfu.fixed[1], 0)
        self.assertEqual(lfu.fixed[0], 0)
        self.assertEqual(lfu.fixed[3], 1)


    def testUnfixMethod(self):
        lfu = LFU(2)
        self.assertEqual(lfu.size, 2)
        self.assertEqual(list(lfu.queue.keys()), [])
        lfu.fix(1)
        lfu.fix(1)
        lfu.unfix(1)
        self.assertEqual(list(lfu.queue.keys()), [1])
        self.assertEqual(lfu.fixed[1], 1)
        self.assertEqual(lfu.fixed[0], 0)
        lfu.unfix(1)
        self.assertEqual(list(lfu.queue.keys()), [1])
        self.assertEqual(lfu.fixed[1], 0)
        self.assertEqual(lfu.fixed[0], 0)
        lfu.fix(2)
        self.assertEqual(list(lfu.queue.keys()), [2, 1])
        self.assertEqual(lfu.fixed[1], 0)
        self.assertEqual(lfu.fixed[0], 0)
        self.assertEqual(lfu.fixed[2], 1)
        lfu.unfix(2)
        self.assertEqual(list(lfu.queue.keys()), [2, 1])
        self.assertEqual(lfu.fixed[1], 0)
        self.assertEqual(lfu.fixed[0], 0)
        self.assertEqual(lfu.fixed[2], 0)

    def testIntegration1(self):
        lfu = LFU(3)
        lfu.fix(1)
        lfu.fix(2)
        lfu.fix(3)
        self.assertEqual(list(lfu.queue.keys()), [1, 2, 3])
        self.assertEqual(lfu.fixed[1], 1)
        self.assertEqual(lfu.fixed[2], 1)
        self.assertEqual(lfu.fixed[3], 1)
        self.assertEqual(lfu.fixed[0], 0)
        lfu.unfix(1)
        self.assertEqual(list(lfu.queue.keys()), [1, 2, 3])
        self.assertEqual(lfu.fixed[1], 0)
        self.assertEqual(lfu.fixed[2], 1)
        self.assertEqual(lfu.fixed[3], 1)
        self.assertEqual(lfu.fixed[0], 0)
        lfu.fix(1)
        lfu.fix(1)
        lfu.unfix(1)
        lfu.unfix(2)
        lfu.fix(4)
        lfu.fix(4)
        self.assertEqual(list(lfu.queue.keys()), [3, 4, 1])
        self.assertEqual(lfu.fixed[1], 1)
        self.assertEqual(lfu.fixed[2], 0)
        self.assertEqual(lfu.fixed[3], 1)
        self.assertEqual(lfu.fixed[4], 2)
        self.assertEqual(lfu.fixed[0], 0)
        lfu.fix(1)
        with self.assertRaises(Exception):
            res = lfu.fix(5)

    def testIntegration2(self):
        lfu = LFU(4)
        lfu.fix(1)
        lfu.fix(2)
        lfu.fix(3)
        lfu.fix(4)
        with self.assertRaises(Exception):
            res = lfu.fix(5)
        self.assertEqual(list(lfu.queue.keys()), [1, 2, 3, 4])
        self.assertEqual(lfu.fixed[1], 1)
        self.assertEqual(lfu.fixed[2], 1)
        self.assertEqual(lfu.fixed[3], 1)
        self.assertEqual(lfu.fixed[4], 1)
        self.assertEqual(lfu.fixed[0], 0)
        lfu.fix(1)
        lfu.unfix(1)
        lfu.unfix(1)
        lfu.unfix(2)
        self.assertEqual(list(lfu.queue.keys()), [2, 3, 4, 1])
        self.assertEqual(lfu.fixed[1], 0)
        self.assertEqual(lfu.fixed[2], 0)
        self.assertEqual(lfu.fixed[3], 1)
        self.assertEqual(lfu.fixed[0], 0)
        lfu.fix(5)
        lfu.fix(5)
        lfu.fix(5)
        self.assertEqual(list(lfu.queue.keys()), [3, 4, 1, 5])
        self.assertEqual(lfu.fixed[1], 0)
        self.assertEqual(lfu.fixed[2], 0)
        self.assertEqual(lfu.fixed[3], 1)
        self.assertEqual(lfu.fixed[5], 3)
        self.assertEqual(lfu.fixed[0], 0)
        res = lfu.fix(6)
        with self.assertRaises(Exception):
            res = lfu.fix(7)


if __name__ == '__main__':
    unittest.main()
